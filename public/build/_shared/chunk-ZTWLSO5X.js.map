{
  "version": 3,
  "sources": ["../../../app/utils/transactionFilters.ts"],
  "sourcesContent": ["// REMIX HMR BEGIN\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\nimport.meta.hot = __hmr__.createHotContext(\n//@ts-expect-error\n\"app/utils/transactionFilters.ts\"\n);\nimport.meta.hot.lastModified = \"1730129418549.3547\";\n}\n// REMIX HMR END\n\nimport { Transaction } from \"~/types\";\n\nexport const sortTransactions = (transactions: Transaction[], filter: string) => {\n    // Check if transactions is an array and not null/undefined\n    if (!Array.isArray(transactions)) {\n        console.error(\"Expected an array of transactions, but got:\", transactions);\n        return []; // Return an empty array if the input is invalid\n    }\n\n    switch (filter) {\n        case 'latest':\n            return [...transactions].sort((a, b) => b.transactionDate.toDate().getTime() - a.transactionDate.toDate().getTime());\n        case 'oldest':\n            return [...transactions].sort((a, b) => a.transactionDate.toDate().getTime() - b.transactionDate.toDate().getTime());\n        case 'aToZ':\n            return [...transactions].sort((a, b) => a.transactionName.localeCompare(b.transactionName));\n        case 'zToA':\n            return [...transactions].sort((a, b) => b.transactionName.localeCompare(a.transactionName));\n        case 'lowest':\n            return [...transactions].sort((a, b) => a.transactionAmt - b.transactionAmt);\n        case 'highest':\n            return [...transactions].sort((a, b) => b.transactionAmt - a.transactionAmt);\n        default:\n            return transactions;\n    }\n}\n\nexport const filterTransactionsByCategory = (transactions: Transaction[], category: string) => {\n    if (category === 'All Transactions') return transactions;\n    return transactions.filter(transaction => transaction.transactionCategory === category);\n}\n\nexport const filterTransactionsByRecurringBill = (transactions: Transaction[]) => {\n    return transactions\n        .filter(transaction => transaction.recurringBill === true)\n}\n\nexport const filterTransactionsByName = (transactions: Transaction[], name: string) => {\n    return transactions.filter(transaction =>\n        transaction.transactionName.toLowerCase().startsWith(name.toLowerCase())\n    );\n}"],
  "mappings": ";;;;;AAEA,IAAI,aAAa;AACjB,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EACA;AACA,cAAY,IAAI,eAAe;AAC/B;AAKO,IAAM,mBAAmB,CAAC,cAA6B,WAAmB;AAE7E,MAAI,CAAC,MAAM,QAAQ,YAAY,GAAG;AAC9B,YAAQ,MAAM,+CAA+C,YAAY;AACzE,WAAO,CAAC;AAAA,EACZ;AAEA,UAAQ,QAAQ;AAAA,IACZ,KAAK;AACD,aAAO,CAAC,GAAG,YAAY,EAAE,KAAK,CAAC,GAAG,MAAM,EAAE,gBAAgB,OAAO,EAAE,QAAQ,IAAI,EAAE,gBAAgB,OAAO,EAAE,QAAQ,CAAC;AAAA,IACvH,KAAK;AACD,aAAO,CAAC,GAAG,YAAY,EAAE,KAAK,CAAC,GAAG,MAAM,EAAE,gBAAgB,OAAO,EAAE,QAAQ,IAAI,EAAE,gBAAgB,OAAO,EAAE,QAAQ,CAAC;AAAA,IACvH,KAAK;AACD,aAAO,CAAC,GAAG,YAAY,EAAE,KAAK,CAAC,GAAG,MAAM,EAAE,gBAAgB,cAAc,EAAE,eAAe,CAAC;AAAA,IAC9F,KAAK;AACD,aAAO,CAAC,GAAG,YAAY,EAAE,KAAK,CAAC,GAAG,MAAM,EAAE,gBAAgB,cAAc,EAAE,eAAe,CAAC;AAAA,IAC9F,KAAK;AACD,aAAO,CAAC,GAAG,YAAY,EAAE,KAAK,CAAC,GAAG,MAAM,EAAE,iBAAiB,EAAE,cAAc;AAAA,IAC/E,KAAK;AACD,aAAO,CAAC,GAAG,YAAY,EAAE,KAAK,CAAC,GAAG,MAAM,EAAE,iBAAiB,EAAE,cAAc;AAAA,IAC/E;AACI,aAAO;AAAA,EACf;AACJ;AAEO,IAAM,+BAA+B,CAAC,cAA6B,aAAqB;AAC3F,MAAI,aAAa;AAAoB,WAAO;AAC5C,SAAO,aAAa,OAAO,iBAAe,YAAY,wBAAwB,QAAQ;AAC1F;AAEO,IAAM,oCAAoC,CAAC,iBAAgC;AAC9E,SAAO,aACF,OAAO,iBAAe,YAAY,kBAAkB,IAAI;AACjE;AAEO,IAAM,2BAA2B,CAAC,cAA6B,SAAiB;AACnF,SAAO,aAAa;AAAA,IAAO,iBACvB,YAAY,gBAAgB,YAAY,EAAE,WAAW,KAAK,YAAY,CAAC;AAAA,EAC3E;AACJ;",
  "names": []
}
