{
  "version": 3,
  "sources": ["../../../app/components/pots/potTitle.tsx", "../../../app/components/pots/potModal.tsx", "../../../app/components/pots/potChartForModal.tsx", "../../../app/components/pots/potChart.tsx", "../../../app/components/pots/potButton.tsx", "../../../app/components/pots/potCard.tsx", "../../../app/routes/pots.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/components/pots/potTitle.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/components/pots/potTitle.tsx\");\n  import.meta.hot.lastModified = \"1729933483843.8936\";\n}\n// REMIX HMR END\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { Box, Flex, Text } from \"@chakra-ui/react\";\nimport { DotsThree } from \"phosphor-react\";\nimport theme from \"~/theme\";\nimport useModal from \"~/hooks/useModal\";\nimport EditDeleteDropdown from \"../ui/editDeleteDropdown\";\nimport PotModal from \"./potModal\";\nconst PotTitle = ({\n  fill,\n  potName,\n  onEdit,\n  onDelete\n}) => {\n  _s();\n  const {\n    isModalOpen,\n    potModalMode,\n    selectedItem,\n    openEditPotModal,\n    openDeletePotModal,\n    closeModal\n  } = useModal();\n  const [dropdownIsOpen, setDropdownIsOpen] = useState(false);\n  const dropdownRef = useRef(null);\n  const toggleDropdown = event => {\n    event.preventDefault();\n    setDropdownIsOpen(!dropdownIsOpen);\n  };\n  const handleClickOutside = event => {\n    if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {\n      setDropdownIsOpen(false);\n    }\n  };\n  useEffect(() => {\n    if (dropdownIsOpen) {\n      document.addEventListener(\"mousedown\", handleClickOutside);\n    } else {\n      document.removeEventListener(\"mousedown\", handleClickOutside);\n    }\n    return () => {\n      document.removeEventListener(\"mousedown\", handleClickOutside);\n    };\n  }, [dropdownIsOpen]);\n  return <Flex justify=\"space-between\" align=\"center\" alignSelf=\"stretch\" width=\"100%\">\n            <Flex width=\"19.75rem\" align=\"center\" gap={theme.spacing[200]}>\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\">\n                    <circle cx=\"8\" cy=\"8\" r=\"8\" fill={fill} />\n                </svg>\n                <Text textStyle=\"preset2\" color=\"grey.900\">{potName}</Text>\n            </Flex>\n\n            <Box position=\"relative\" ref={dropdownRef}>\n                <DotsThree onMouseDown={toggleDropdown} cursor=\"pointer\" />\n                {dropdownIsOpen && <Box width=\"120px\" position=\"absolute\" top=\"100%\" left=\"auto\" transform=\"translateX(-100%)\" zIndex={1}>\n                        <EditDeleteDropdown label=\"Pot\" onEdit={onEdit} onDelete={onDelete} />\n                    </Box>}\n            </Box>\n            {isModalOpen && <PotModal mode={potModalMode} isOpen={isModalOpen} onClose={closeModal} />}\n        </Flex>;\n};\n_s(PotTitle, \"ANjfMxp0ruRh0Lf7Jk1fc2Iu2XU=\", false, function () {\n  return [useModal];\n});\n_c = PotTitle;\nexport default PotTitle;\nvar _c;\n$RefreshReg$(_c, \"PotTitle\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;", "// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/components/pots/potModal.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/components/pots/potModal.tsx\");\n  import.meta.hot.lastModified = \"1733615785705.3489\";\n}\n// REMIX HMR END\n\nimport React, { useEffect, useState } from \"react\";\nimport AddNewModal from \"../ui/addNewModal\";\nimport usePotsData from \"~/hooks/usePots\";\nimport { Button, Flex, FormControl, useToast } from \"@chakra-ui/react\";\nimport { deleteDoc, doc, getDoc, Timestamp, updateDoc } from \"firebase/firestore\";\nimport { useAuth } from \"~/contexts/authContext/authProvider\";\nimport { db } from \"~/firebase/firebase\";\nimport DropdownMenu from \"../ui/dropdownMenu\";\nimport InputField from \"../ui/inputField\";\nimport theme from \"~/theme\";\nimport { themeMenuItems } from \"~/utils/menuItems\";\nimport PotChartForModal from \"./potChartForModal\";\nimport PageLoading from \"../ui/pageLoading\";\nimport { Form } from \"@remix-run/react\";\nconst PotModal = ({\n  isOpen,\n  onClose,\n  mode,\n  potId,\n  existingPot\n}) => {\n  _s();\n  const [potName, setPotName] = useState(\"\");\n  const [targetAmt, setTargetAmt] = useState(0);\n  const [potColor, setPotColor] = useState(\"\");\n  const [totalSaved, setTotalSaved] = useState(existingPot?.totalSaved || 0);\n  const [withdrawAddAmt, setWithdrawAddAmt] = useState(\"0\");\n  const [percentage, setPercentage] = useState(0);\n  const [savedAmtBarWidth, setSavedAmtBarWidth] = useState(0);\n  const [addOrWithdrawAmtBarWidth, setAddOrWithdrawAmtBarWidth] = useState(0);\n  const [isLoading, setIsLoading] = useState(false);\n  const [errors, setErrors] = useState({\n    potName: \"\",\n    targetAmt: \"\"\n  });\n  const [nameError, setNameError] = useState(null);\n  const {\n    pots: existingPots,\n    addPot\n  } = usePotsData();\n  const {\n    user\n  } = useAuth();\n  const toast = useToast();\n  const maxChars = 30;\n\n  // Extract used colors and categories from existing budgets\n  const usedColors = existingPots.map(pot => pot.potColor);\n  const usedNames = existingPots.map(pot => pot.potName);\n  const handleNameChange = event => {\n    const name = event.target.value;\n    const normalizedName = name.toLowerCase();\n    if (usedNames.some(existingName => existingName.toLowerCase() === normalizedName)) {\n      setNameError(\"This name is already in use. Please choose a different one.\");\n    } else {\n      setNameError(null);\n    }\n    setPotName(name);\n  };\n  const validateForm = () => {\n    let valid = true;\n\n    // Initialize newErrors with all required fields\n    let newErrors = {\n      potName: \"\",\n      targetAmt: \"\"\n    };\n    if (!potName || potName === \"\" || potName === \"e.g. Rainy Days\") {\n      newErrors.potName = \"Pot must have a name.\";\n      valid = false;\n    }\n    if (!targetAmt || targetAmt <= 0) {\n      newErrors.targetAmt = \"Target amount must be greater than 0.\";\n      valid = false;\n    }\n    setErrors(newErrors);\n    return valid;\n  };\n\n  // Pre-fill form if in edit mode\n  useEffect(() => {\n    if (mode === \"edit\" && existingPot) {\n      setPotName(existingPot.potName || \"\");\n      setTargetAmt(Number(existingPot.targetAmt) || 0);\n      setPotColor(existingPot.potColor || \"\");\n      console.log(\"Editing mode with data: \", existingPot);\n    }\n  }, [mode, existingPot]);\n\n  // Logic for adding/editing pots\n  const handleSavePot = async () => {\n    if (!validateForm()) return;\n\n    // Check for errors before proceeding with the save\n    if (nameError) {\n      // Don't submit the form if there's an error\n      return;\n    }\n    const capitalizedPotName = potName.charAt(0).toUpperCase() + potName.slice(1).toLowerCase();\n    try {\n      if (mode === \"addNew\") {\n        // Add new pot to database\n        const newPot = {\n          potName: capitalizedPotName,\n          targetAmt: Number(targetAmt),\n          potColor: potColor,\n          totalSaved: totalSaved,\n          createdAt: Timestamp.now()\n        };\n        await addPot(newPot);\n        toast({\n          title: \"Pot added successfully.\",\n          status: \"success\",\n          duration: 3000,\n          isClosable: true\n        });\n      } else if (mode === \"edit\" && potId) {\n        // Update existing pot\n        if (user) {\n          const potDocRef = doc(db, `users/${user.uid}/pots`, potId);\n          await updateDoc(potDocRef, {\n            potName: capitalizedPotName,\n            targetAmt: Number(targetAmt),\n            potColor: potColor,\n            totalSaved: totalSaved\n          });\n          toast({\n            title: \"Pot edited successfully.\",\n            status: \"success\",\n            duration: 3000,\n            isClosable: true\n          });\n        } else {\n          console.error(\"User is not authenticated.\");\n        }\n      }\n\n      // Reset form and close the modal\n      setPotName(\"\");\n      setTargetAmt(0);\n      setPotColor(\"\");\n      setTotalSaved(0);\n      onClose();\n    } catch (error) {\n      console.log(\"Error adding pot: \", error);\n    }\n  };\n\n  // Logic for deleting pots\n  const handleDeletePot = async () => {\n    console.log(\"handleDeletePot called, mode:\", mode, \"potId:\", potId);\n    if (mode === \"delete\" && potId) {\n      if (user) {\n        // Delete pot\n        const potDocRef = doc(db, `users/${user.uid}/pots`, potId);\n        await deleteDoc(potDocRef);\n        console.log(\"Pot deleted successfully\");\n        onClose();\n        toast({\n          title: \"Pot deleted successfully.\",\n          status: \"success\",\n          duration: 3000,\n          isClosable: true\n        });\n      } else {\n        console.error(\"User is not authenticated.\");\n      }\n    } else {\n      console.error(\"Delete mode or potId is not valid\");\n    }\n  };\n\n  // Logic for adding money to pots\n  const handleAddMoneyToPot = async () => {\n    if (mode === \"addMoney\" && potId) {\n      if (user) {\n        const amountToAdd = parseFloat(withdrawAddAmt);\n        if (!isNaN(amountToAdd)) {\n          // Add money to pot\n          const potDocRef = doc(db, `users/${user.uid}/pots`, potId);\n          const potDoc = await getDoc(potDocRef);\n          if (amountToAdd >= 0 && potDoc.exists()) {\n            const currentTotalSaved = potDoc.data().totalSaved;\n            const targetAmt = potDoc.data().targetAmt;\n            const newTotalSaved = currentTotalSaved + amountToAdd;\n            await updateDoc(potDocRef, {\n              totalSaved: newTotalSaved\n            });\n            setTotalSaved(newTotalSaved);\n            onClose();\n            if (newTotalSaved >= targetAmt) {\n              toast({\n                title: \"Congratulations! You've met your target.\",\n                description: `Your pot has reached or exceeded the target amount of $${targetAmt}.`,\n                status: \"success\",\n                duration: 3000,\n                isClosable: true\n              });\n            }\n          }\n        }\n      } else {\n        console.error(\"User is not authenticated.\");\n      }\n    }\n  };\n\n  // Logic for withdrawing money from pots\n  const handleWithdrawFromPot = async () => {\n    if (mode === \"withdraw\" && potId) {\n      if (user) {\n        const amountToAdd = parseFloat(withdrawAddAmt);\n        if (!isNaN(amountToAdd)) {\n          // Add money to pot\n          const potDocRef = doc(db, `users/${user.uid}/pots`, potId);\n          const potDoc = await getDoc(potDocRef);\n          if (amountToAdd >= 0 && potDoc.exists()) {\n            const currentTotalSaved = potDoc.data().totalSaved;\n            if (currentTotalSaved - amountToAdd >= 0) {\n              await updateDoc(potDocRef, {\n                totalSaved: currentTotalSaved - amountToAdd\n              });\n              setTotalSaved(currentTotalSaved - amountToAdd);\n              onClose();\n            } else {\n              toast({\n                title: \"Insufficient Funds\",\n                description: `You only have $${currentTotalSaved} available.`,\n                status: \"error\",\n                duration: 3000,\n                isClosable: true\n              });\n            }\n          }\n        } else {\n          console.error(\"User is not authenticated.\");\n        }\n      }\n    }\n  };\n\n  // Logic for fetching the target amount from Firestore, to be used in other functions\n  const fetchTargetAmt = async () => {\n    if (potId && user) {\n      const potDocRef = doc(db, `users/${user.uid}/pots`, potId);\n      const potDoc = await getDoc(potDocRef);\n      if (potDoc.exists()) {\n        const potData = potDoc.data();\n        setTargetAmt(potData.targetAmt); // Update state with the target amount\n      } else {\n        console.error(\"Pot document does not exist.\");\n      }\n    }\n  };\n  useEffect(() => {\n    fetchTargetAmt(); // Fetch target amount whenever potId changes\n  }, [potId, user]);\n\n  // Logic for calculating the width of the saved amount bar in addMoney/withdraw modals\n  const calculateSavedAmtBarWidth = async () => {\n    setIsLoading(true);\n    try {\n      if ((mode === \"withdraw\" || mode === \"addMoney\") && potId) {\n        if (user) {\n          const potDocRef = doc(db, `users/${user.uid}/pots`, potId);\n          const potDoc = await getDoc(potDocRef);\n          if (potDoc.exists()) {\n            const currentTotalSaved = potDoc.data().totalSaved;\n            const currentTargetAmt = potDoc.data().targetAmt;\n            if (currentTargetAmt && currentTotalSaved) {\n              const barWidth = currentTotalSaved / currentTargetAmt * 100;\n              setSavedAmtBarWidth(barWidth);\n              return;\n            }\n          } else {\n            console.error(\"Pot document does not exist.\");\n          }\n        } else {\n          console.error(\"User is not authenticated.\");\n        }\n      }\n    } catch (error) {\n      console.error(\"Error calculating saved amount bar width:\", error);\n    } finally {\n      setIsLoading(false);\n    }\n    setSavedAmtBarWidth(0);\n  };\n  useEffect(() => {\n    calculateSavedAmtBarWidth();\n  }, [mode, user, potId]);\n\n  // Logic for calculating the width of the add/withdraw amount bar in addMoney/withdraw modals\n  const calculateAddOrWithdrawBarWidth = () => {\n    const maxWidth = 100;\n    const amount = Number(withdrawAddAmt);\n    const target = Number(targetAmt);\n    const widthPercentage = target > 0 ? amount / target * maxWidth : 0;\n    const availableWidth = maxWidth - savedAmtBarWidth;\n    const barWidth = Math.min(widthPercentage, availableWidth);\n    setAddOrWithdrawAmtBarWidth(barWidth);\n  };\n  useEffect(() => {\n    calculateAddOrWithdrawBarWidth();\n  }, [withdrawAddAmt, targetAmt]);\n\n  // Logic for calculating the percentage in the addMoney/withdraw modals\n  const calculatePercentage = () => {\n    const amount = Number(withdrawAddAmt);\n    const existingAmt = existingPot?.totalSaved ?? 0;\n    const target = Number(targetAmt);\n    if (target > 0) {\n      const total = existingAmt + amount;\n      const percentage = total / target * 100;\n      setPercentage(percentage);\n      return;\n    }\n    return 0;\n  };\n  useEffect(() => {\n    calculatePercentage();\n  }, [withdrawAddAmt, targetAmt]);\n\n  // Handle input change for add/withdraw input field\n  const handleAddWithdrawInputChange = e => {\n    setWithdrawAddAmt(e.target.value);\n  };\n  return <AddNewModal isOpen={isOpen} onClose={onClose} headerTitle={mode === \"addNew\" ? \"Add New Pot\" : mode === \"edit\" ? \"Edit Pot\" : mode === \"delete\" ? \"Delete Pot\" : mode === \"withdraw\" ? `Withdraw from \u2018${existingPot?.potName}\u2019` : mode === \"addMoney\" ? `Add to \u2018${existingPot?.potName}\u2019` : \"\"} headerTag={mode === \"addNew\" ? \"Create a pot to set savings targets. These can help keep you on track as you save for special purchases.\" : mode === \"edit\" ? \"If your saving targets change, feel free to update your pots.\" : mode === \"delete\" ? \"Are you sure you want to delete this pot? This action cannot be reversed, and all the data inside it will be removed forever.\" : mode === \"withdraw\" ? \"Enter the amount to withdraw back into your checking account.\" : mode === \"addMoney\" ? \"Enter amount to add to your savings.\" : \"\"}>\n            {isLoading ? <Flex width=\"100%\" align=\"center\" justify=\"center\">\n                    <PageLoading />\n                </Flex> : <>\n                    {(mode === \"addNew\" || mode === \"edit\") && <Form>\n                            <Flex direction=\"column\" align=\"flex-start\" gap={theme.spacing[200]}>\n                                <FormControl isInvalid={!!errors.potName}>\n                                    <InputField id=\"potName\" label=\"Pot Name\" type=\"text\" placeholder=\"e.g. Rainy Days\" helperText={nameError ? nameError : errors.potName ? errors.potName : `${maxChars - potName.length} characters left`} onChange={handleNameChange} value={potName || \"\"} usedNames={usedNames} isRequired={true} maxLength={30} />\n                                </FormControl>\n                                <FormControl isInvalid={!!errors.targetAmt}>\n                                    <InputField placeholder=\"e.g. 2000\" type=\"number\" isRequired={true} label=\"Target\" prefix=\"$\" onChange={e => setTargetAmt(parseFloat(e.target.value) || 0)} value={targetAmt ? targetAmt.toString() : \"\"} helperText={errors.targetAmt} />\n                                </FormControl>\n                                <FormControl>\n                                    <DropdownMenu label=\"Green\" items={themeMenuItems} fieldTitle=\"Theme\" colorTag={theme.colors.secondary.green} usedColors={usedColors} onChange={item => setPotColor(item.colorTag || \"\")} value={potColor} />\n                                </FormControl>\n                            </Flex>\n                        </Form>}\n\n                    {(mode === \"withdraw\" || mode === \"addMoney\") && <Flex direction=\"column\" align=\"flex-start\" gap={theme.spacing[250]}>\n                            <PotChartForModal targetAmt={existingPot?.targetAmt} newAmount={withdrawAddAmt ? parseFloat(withdrawAddAmt) : 0} percentage={addOrWithdrawAmtBarWidth} barColor={mode === \"withdraw\" ? theme.colors.secondary.red : mode === \"addMoney\" ? theme.colors.secondary.green : \"\"} savedAmtBarWidth={savedAmtBarWidth} addOrWithdrawAmtBarWidth={addOrWithdrawAmtBarWidth} />\n                            <InputField label={mode === \"withdraw\" ? \"Amount to Withdraw\" : mode === \"addMoney\" ? \"Amount to Add\" : \"\"} type=\"number\" prefix=\"$\" isRequired={true} onChange={handleAddWithdrawInputChange} />\n                        </Flex>}\n\n                    <Button variant=\"primary\" width=\"100%\" height=\"100%\" padding={theme.spacing[200]} justifyContent=\"center\" alignItems=\"center\" gap={theme.spacing[200]} flex=\"1 0 0\" borderRadius={theme.spacing[100]} textStyle=\"preset4bold\" fontSize=\" 0.875rem\" onClick={() => {\n        console.log(\"Button clicked, mode:\", mode);\n        if (mode === \"addNew\" || mode === \"edit\") {\n          handleSavePot();\n        } else if (mode === \"delete\") {\n          handleDeletePot();\n        } else if (mode === \"withdraw\") {\n          handleWithdrawFromPot();\n        } else if (mode === \"addMoney\") {\n          handleAddMoneyToPot();\n        }\n      }} bg={mode === \"addNew\" || mode === \"edit\" || mode === \"withdraw\" || mode === \"addMoney\" ? \"grey.900\" : \"secondary.red\"}>\n                        {mode === \"addNew\" ? \"Add Pot\" : mode === \"edit\" ? \"Save Changes\" : mode === \"delete\" ? \"Yes, Confirm Deletion\" : mode === \"withdraw\" ? \"Confirm Withdrawal\" : mode === \"addMoney\" ? \"Confirm Addition\" : \"\"}\n                    </Button>\n\n                    {mode === \"delete\" && <Button onClick={onClose} justifyContent=\"center\" alignItems=\"center\" gap={theme.spacing[150]} variant=\"tertiary\" textStyle=\"preset4\" fontSize=\"0.875rem\" color=\"grey.500\" _hover={{\n        color: \"grey.900\"\n      }}>\n                            No, Go Back\n                        </Button>}\n                </>}\n        </AddNewModal>;\n};\n_s(PotModal, \"CxJ1QbzbgfEvsEiHh3dT8vyxMlA=\", false, function () {\n  return [usePotsData, useAuth, useToast];\n});\n_c = PotModal;\nexport default PotModal;\nvar _c;\n$RefreshReg$(_c, \"PotModal\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;", "// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/components/pots/potChartForModal.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/components/pots/potChartForModal.tsx\");\n  import.meta.hot.lastModified = \"1729949989159.6248\";\n}\n// REMIX HMR END\n\nimport { Box, Flex, Text } from \"@chakra-ui/react\";\nimport React from \"react\";\nimport theme from \"~/theme\";\nconst PotChartForModal = ({\n  newAmount,\n  percentage,\n  targetAmt,\n  savedAmtBarWidth,\n  addOrWithdrawAmtBarWidth,\n  barColor\n}) => {\n  const gap = theme.spacing[50];\n  console.log(\"savedAmtBarWidth: \", savedAmtBarWidth);\n  return <Flex gap={theme.spacing[200]} direction=\"column\" align=\"flex-start\" width=\"100%\">\n            <Flex justify=\"space-between\" align=\"center\" width=\"100%\">\n                <Text textStyle=\"preset4\" color=\"grey.500\">New Amount</Text>\n                <Text textStyle=\"preset1\" color=\"grey.900\" textAlign=\"right\">${newAmount.toFixed(2)}</Text>\n            </Flex>\n            <Flex direction=\"column\" align=\"flex-start\" width=\"100%\">\n                <Flex width=\"100%\" height={theme.spacing[100]} align=\"center\" borderRadius={theme.spacing[50]} bg=\"beige.100\" position=\"relative\">\n                    <Box height={theme.spacing[100]} width={`${savedAmtBarWidth}%`} bg=\"grey.900\" borderRadius={`${theme.spacing[50]} 0rem 0rem ${theme.spacing[50]}}`} position=\"absolute\" left={0} />\n                    <Box height={theme.spacing[100]} width={`${addOrWithdrawAmtBarWidth}%`} bg={barColor} borderRadius={`0rem ${theme.spacing[50]} ${theme.spacing[50]} 0rem`} position=\"absolute\" left={`calc(${savedAmtBarWidth}% + 0.125rem)`} />\n                </Flex>\n            </Flex>\n            <Flex align=\"flex-start\" gap={theme.spacing[100]} width=\"100%\">\n                <Text flex=\"1\" textStyle=\"preset5bold\" color={barColor}>{percentage}%</Text>\n                <Text flex=\"1\" textStyle=\"preset5\" color=\"grey.500\" textAlign=\"right\">Target of ${targetAmt}</Text>\n            </Flex>\n        </Flex>;\n};\n_c = PotChartForModal;\nexport default PotChartForModal;\nvar _c;\n$RefreshReg$(_c, \"PotChartForModal\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;", "// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/components/pots/potChart.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/components/pots/potChart.tsx\");\n  import.meta.hot.lastModified = \"1728054963517.1917\";\n}\n// REMIX HMR END\n\nimport React from \"react\";\nimport { Box, Flex, Text } from \"@chakra-ui/react\";\nimport theme from \"~/theme\";\nconst PotChart = ({\n  totalSaved,\n  percentage,\n  targetAmt,\n  barColor,\n  barAmt\n}) => {\n  return <Flex gap={theme.spacing[200]} align=\"center\" alignSelf=\"stretch\" direction=\"column\">\n            <Flex justify=\"space-between\" align=\"center\" alignSelf=\"stretch\">\n                <Flex align=\"center\" gap=\"0.6875rem\">\n                    <Text textStyle=\"preset4\" color=\"grey.500\">Total Saved</Text>\n                </Flex>\n                <Text textStyle=\"preset1\" color=\"grey.900\">${totalSaved.toFixed(2)}</Text>\n            </Flex>\n\n            <Flex direction=\"column\" align=\"flex-start\" gap=\"0.8125rem\" alignSelf=\"stretch\">\n                <Flex height={theme.spacing[100]} align=\"flex-start\" alignSelf=\"stretch\" borderRadius={theme.spacing[50]} bg=\"beige.100\">\n                    <Box width={barAmt} // change to variable data later\n        alignSelf=\"stretch\" borderRadius={theme.spacing[50]} bg={barColor} />\n                    <Box flex=\"1 0 0\" alignSelf=\"stretch\" />\n                </Flex>\n\n                <Flex align=\"flex-start\" gap={theme.spacing[100]} alignSelf=\"stretch\">\n                    <Flex flex=\"1 0 0\">\n                        <Text textStyle=\"preset5bold\" color=\"grey.500\">{percentage}%</Text>\n                    </Flex>\n                    <Flex>\n                        <Text textStyle=\"preset5\" color=\"grey.500\">Target of ${targetAmt}</Text>\n                    </Flex>\n                </Flex>\n            </Flex>\n        </Flex>;\n};\n_c = PotChart;\nexport default PotChart;\nvar _c;\n$RefreshReg$(_c, \"PotChart\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;", "// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/components/pots/potButton.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/components/pots/potButton.tsx\");\n  import.meta.hot.lastModified = \"1731514058690.1157\";\n}\n// REMIX HMR END\n\nimport { Button } from \"@chakra-ui/react\";\nimport React from \"react\";\nimport theme from \"~/theme\";\nconst PotButton = ({\n  children,\n  id,\n  onClick\n}) => {\n  return <Button variant=\"secondary\" padding={theme.spacing[200]} justifyContent=\"center\" alignContent=\"center\" gap={theme.spacing[200]} flex=\"1 0 0\" borderRadius={theme.spacing[100]} height=\"100%\" onClick={() => onClick(id)}>\n            {children}\n        </Button>;\n};\n_c = PotButton;\nexport default PotButton;\nvar _c;\n$RefreshReg$(_c, \"PotButton\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;", "// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/components/pots/potCard.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/components/pots/potCard.tsx\");\n  import.meta.hot.lastModified = \"1731175550891.3428\";\n}\n// REMIX HMR END\n\nimport { Flex } from \"@chakra-ui/react\";\nimport PotTitle from \"./potTitle\";\nimport PotChart from \"./potChart\";\nimport PotButton from \"./potButton\";\nimport theme from \"~/theme\";\nimport React from \"react\";\nconst PotCard = ({\n  pot,\n  onEdit,\n  onDelete,\n  onWithdraw,\n  onAddMoney\n}) => {\n  const percentageSaved = pot.totalSaved / pot.targetAmt * 100;\n  return <Flex padding={theme.spacing[300]} direction=\"column\" align=\"flex-start\" gap={theme.spacing[400]} flex=\"1 0 0\" borderRadius={theme.spacing[150]} bg=\"white\" key={pot.id}>\n            <PotTitle onEdit={() => onEdit(pot.id)} onDelete={() => onDelete(pot.id)} fill={pot.potColor} potName={pot.potName} />\n            <PotChart totalSaved={pot.totalSaved} percentage={percentageSaved.toFixed(1)} targetAmt={pot.targetAmt} barColor={pot.potColor} barAmt={`${percentageSaved}%`} />\n\n            <Flex align=\"flex-start\" gap={theme.spacing[200]} alignSelf=\"stretch\">\n                <PotButton id={pot.id} onClick={onAddMoney}>+ Add Money</PotButton>\n                <PotButton id={pot.id} onClick={onWithdraw}>Withdraw</PotButton>\n            </Flex>\n        </Flex>;\n};\n_c = PotCard;\nexport default PotCard;\nvar _c;\n$RefreshReg$(_c, \"PotCard\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;", "// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/pots.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/pots.tsx\");\n  import.meta.hot.lastModified = \"1733508671090.5793\";\n}\n// REMIX HMR END\n\nimport { Flex, SimpleGrid } from \"@chakra-ui/react\";\nimport MainContent from \"~/components/layout/app/mainContent\";\nimport PageHeader from \"~/components/layout/app/pageHeader\";\nimport PotCard from \"~/components/pots/potCard\";\nimport usePotsData from \"~/hooks/usePots\";\nimport theme from \"~/theme\";\nimport PageLoading from \"~/components/ui/pageLoading\";\nimport useModal from \"~/hooks/useModal\";\nimport PotModal from \"~/components/pots/potModal\";\nexport default function PotsRoute() {\n  _s();\n  const {\n    pots,\n    loading: potsLoading\n  } = usePotsData();\n  const {\n    isModalOpen,\n    potModalMode,\n    selectedItem,\n    openAddPotModal,\n    openEditPotModal,\n    openDeletePotModal,\n    openWithdrawPotModal,\n    openAddMoneyPotModal,\n    closeModal\n  } = useModal();\n  const selectedPot = pots?.find(pot => pot.id === selectedItem);\n  const handleEdit = id => {\n    console.log(\"Editing pot with id: \", id);\n    openEditPotModal(id);\n  };\n  const handleDelete = id => {\n    openDeletePotModal(id);\n  };\n  const handleWithdraw = id => {\n    openWithdrawPotModal(id);\n  };\n  const handleAddMoney = id => {\n    openAddMoneyPotModal(id);\n  };\n  return <MainContent>\n            {potsLoading ? <Flex height=\"100vh\" width=\"100%\" align=\"center\" justify=\"center\">\n                    <PageLoading />\n                </Flex> : <>\n                    <PageHeader openModal={openAddPotModal} maxCount={pots.length} maxCountLabel=\"pots\">Pots</PageHeader>\n                    {isModalOpen && <PotModal mode={potModalMode} isOpen={isModalOpen} onClose={closeModal} potId={selectedPot?.id} existingPot={selectedPot} />}\n\n                    <Flex maxW=\"90rem\" direction=\"column\" align=\"center\" gap={theme.spacing[300]} alignSelf=\"stretch\">\n                        <SimpleGrid width=\"100%\" columns={{\n          lg: 2,\n          sm: 1\n        }} spacing={theme.spacing[300]}>\n                            {pots.map(pot => <PotCard key={pot.id} pot={pot} onEdit={handleEdit} onDelete={handleDelete} onWithdraw={handleWithdraw} onAddMoney={handleAddMoney} />)}\n                        </SimpleGrid>\n                    </Flex>\n                </>}\n        </MainContent>;\n}\n_s(PotsRoute, \"OCPGsHCmknJIO681bkHkCibRKZs=\", false, function () {\n  return [usePotsData, useModal];\n});\n_c = PotsRoute;\nvar _c;\n$RefreshReg$(_c, \"PotsRoute\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": ["import_react", "import_react", "import_jsx_dev_runtime", "targetAmt", "percentage", "_c", "import_jsx_dev_runtime", "_s", "_c", "import_jsx_dev_runtime", "_c", "import_jsx_dev_runtime", "_c", "import_jsx_dev_runtime", "_c", "import_jsx_dev_runtime", "_s", "_c"]
}
